summarise_each(funs(f = round(median(., na.rm=TRUE))))
df.2015.country = rankings %>%
group_by(., country) %>%
summarise(., top_cwur = min(rank_cwur, na.rm=T),
top_times = min(rank_times, na.rm=T),
top_shanghai = min(rank_shanghai, na.rm=T),
median_cwur = round(median(rank_cwur, na.rm=T)),
median_times = round(median(rank_times, na.rm=T)),
median_shanghai = round(median(rank_shanghai, na.rm=T)),
count_cwur = sum(!is.na(rank_cwur)),
count_times = sum(!is.na(rank_times)),
count_shanghai = sum(!is.na(rank_shanghai))) %>%
left_join(., df.2015.mean, by = 'country')
View(df.2015.country)
names(df.2015.country)
names(df.2015.country)
View(timesData)
runApp()
View(shanghaiData)
shanghaiData = read.csv("./data/shanghaiData.csv", stringsAsFactors = F)
setwd("~/Desktop/Project 2/world-university-ranking")
## global.R ##
library(dplyr)
source('helpers.r')
school_and_country_table = read.csv("./data/school_and_country_table.csv", stringsAsFactors = F) %>%
rename(., university_name = school_name)
cleanupCountry = read.csv("./data/cleanupCountry.csv", stringsAsFactors = F)
cleanupRename = read.csv("./data/cleanupRename.csv", stringsAsFactors = F)
cleanupCoord = read.csv("./data/cleanupCoord.csv", stringsAsFactors = F)
cwur = read.csv("./data/cwurData.csv", stringsAsFactors = F) %>%
rename(., university_name = institution, total_score = score) %>%
mutate(., university_name = ifelse (grepl('^The ', university_name),
gsub('The ','',university_name),
university_name)) %>%
left_join(., cleanupRename, by = c('university_name')) %>%
mutate(., new_name = ifelse(is.na(new_name), university_name, new_name))
shanghaiData = read.csv("./data/shanghaiData.csv", stringsAsFactors = F) %>%
left_join(., rbind(school_and_country_table,cleanupCountry), by = c('university_name')) %>%
mutate(., university_name = ifelse (grepl('^The ', university_name),
gsub('The ','',university_name),
university_name)) %>%
left_join(., cleanupRename, by = c('university_name')) %>%
mutate(., new_name = ifelse(is.na(new_name), university_name, new_name))
timesData = read.csv("./data/timesData.csv", stringsAsFactors = F) %>%
mutate(., university_name = ifelse (grepl('^The ', university_name),
gsub('The ','',university_name),
university_name)) %>%
left_join(., cleanupRename, by = c('university_name')) %>%
mutate(., new_name = ifelse(is.na(new_name), university_name, new_name),
international = as.numeric(international),
income = as.numeric(income),
total_score = as.numeric(total_score))
#expenditure = read.csv("education_expenditure_supplementary_data.csv", stringsAsFactors = F)
#attainment = read.csv("educational_attainment_supplementary_data.csv", stringsAsFactors = F)
#Data frame of unique universities ranked in 2015
rankings = unique(rbind(cwur[,c('new_name','country','year')],
timesData[,c('new_name','country','year')],
shanghaiData[,c('new_name','country','year')]) %>%
filter(., year == 2015) %>%
mutate(., country = gsub('Republic of Ireland', 'Ireland', country)) %>%
mutate(., country = gsub('USA','United States of America', country)) %>%
mutate(., country = gsub('Unisted States of America','United States of America', country)) %>%
mutate(., country = gsub('Unted Kingdom', 'United Kingdom', country)) %>%
mutate(., country = gsub('UK', 'United Kingdom', country)) %>%
mutate(., country = gsub('Slovak Republic', 'Slovakia', country)) %>%
mutate(., country = gsub('Russian Federation', 'Russia', country))) %>%
left_join(., cleanupCoord[,c('new_name','lon','lat')], by = c('new_name')) %>%
left_join(., cwur[,c(1,4:15)], by = c('new_name', 'year')) %>%
left_join(., timesData[,c(1,4:15)], by = c('new_name', 'year')) %>%
left_join(., shanghaiData[,c(1,3:11,13)], by = c('new_name', 'year')) %>%
rename(., rank_cwur = world_rank.x,
national_rank_cwur = national_rank.x,
citations_cwur = citations.x,
total_score_cwur = total_score.x,
rank_times = world_rank.y,
citations_times = citations.y,
total_score_times = total_score.y,
rank_shanghai = world_rank,
national_rank_shanghai = national_rank.y,
total_score_shanghai = total_score) %>%
mutate(., rank_times = gsub('=','',rank_times)) %>%
mutate(., rank_times = as.integer(sapply(rank_times, split_rank)),
rank_shanghai = as.integer(sapply(rank_shanghai, split_rank)))
countries = sort(unique(rankings$country))
df.2015.mean = rankings[,c(2,6:23,25,28,30:36)] %>%
group_by(country) %>%
summarise_each(funs(f = round(median(., na.rm=TRUE))))
df.2015.country = rankings %>%
group_by(., country) %>%
summarise(., top_cwur = min(rank_cwur, na.rm=T),
top_times = min(rank_times, na.rm=T),
top_shanghai = min(rank_shanghai, na.rm=T),
median_cwur = round(median(rank_cwur, na.rm=T)),
median_times = round(median(rank_times, na.rm=T)),
median_shanghai = round(median(rank_shanghai, na.rm=T)),
count_cwur = sum(!is.na(rank_cwur)),
count_times = sum(!is.na(rank_times)),
count_shanghai = sum(!is.na(rank_shanghai))) %>%
left_join(., df.2015.mean, by = 'country')
df.2015.uni = rankings %>%
filter(., !is.na(lon) & !is.na(lat)) ####---> Need to add more coordinates!!!!
runApp()
View(rankings)
View(df.2015.country)
runApp()
setwd("~/Desktop/Project 2/world-university-ranking")
## global.R ##
library(dplyr)
source('helpers.r')
school_and_country_table = read.csv("./data/school_and_country_table.csv", stringsAsFactors = F) %>%
rename(., university_name = school_name)
cleanupCountry = read.csv("./data/cleanupCountry.csv", stringsAsFactors = F)
cleanupRename = read.csv("./data/cleanupRename.csv", stringsAsFactors = F)
cleanupCoord = read.csv("./data/cleanupCoord.csv", stringsAsFactors = F)
cwur = read.csv("./data/cwurData.csv", stringsAsFactors = F) %>%
rename(., university_name = institution, total_score = score) %>%
mutate(., university_name = ifelse (grepl('^The ', university_name),
gsub('The ','',university_name),
university_name)) %>%
left_join(., cleanupRename, by = c('university_name')) %>%
mutate(., new_name = ifelse(is.na(new_name), university_name, new_name))
shanghaiData = read.csv("./data/shanghaiData.csv", stringsAsFactors = F) %>%
left_join(., rbind(school_and_country_table,cleanupCountry), by = c('university_name')) %>%
mutate(., university_name = ifelse (grepl('^The ', university_name),
gsub('The ','',university_name),
university_name)) %>%
left_join(., cleanupRename, by = c('university_name')) %>%
mutate(., new_name = ifelse(is.na(new_name), university_name, new_name))
timesData = read.csv("./data/timesData.csv", stringsAsFactors = F) %>%
mutate(., university_name = ifelse (grepl('^The ', university_name),
gsub('The ','',university_name),
university_name)) %>%
left_join(., cleanupRename, by = c('university_name')) %>%
mutate(., new_name = ifelse(is.na(new_name), university_name, new_name),
international = as.numeric(international),
income = as.numeric(income),
total_score = as.numeric(total_score))
#expenditure = read.csv("education_expenditure_supplementary_data.csv", stringsAsFactors = F)
#attainment = read.csv("educational_attainment_supplementary_data.csv", stringsAsFactors = F)
#Data frame of unique universities ranked in 2015
rankings = unique(rbind(cwur[,c('new_name','country','year')],
timesData[,c('new_name','country','year')],
shanghaiData[,c('new_name','country','year')]) %>%
filter(., year == 2015) %>%
mutate(., country = gsub('Republic of Ireland', 'Ireland', country)) %>%
mutate(., country = gsub('USA','United States of America', country)) %>%
mutate(., country = gsub('Unisted States of America','United States of America', country)) %>%
mutate(., country = gsub('Unted Kingdom', 'United Kingdom', country)) %>%
mutate(., country = gsub('UK', 'United Kingdom', country)) %>%
mutate(., country = gsub('Slovak Republic', 'Slovakia', country)) %>%
mutate(., country = gsub('Russian Federation', 'Russia', country))) %>%
left_join(., cleanupCoord[,c('new_name','lon','lat')], by = c('new_name')) %>%
left_join(., cwur[,c(1,4:15)], by = c('new_name', 'year')) %>%
left_join(., timesData[,c(1,4:15)], by = c('new_name', 'year')) %>%
left_join(., shanghaiData[,c(1,3:11,13)], by = c('new_name', 'year')) %>%
rename(., rank_cwur = world_rank.x,
national_rank_cwur = national_rank.x,
citations_cwur = citations.x,
total_score_cwur = total_score.x,
rank_times = world_rank.y,
citations_times = citations.y,
total_score_times = total_score.y,
rank_shanghai = world_rank,
national_rank_shanghai = national_rank.y,
total_score_shanghai = total_score) %>%
mutate(., rank_times = gsub('=','',rank_times)) %>%
mutate(., rank_times = as.integer(sapply(rank_times, split_rank)),
rank_shanghai = as.integer(sapply(rank_shanghai, split_rank)))
countries = sort(unique(rankings$country))
df.2015.mean = rankings[,c(2,6:23,25,28,30:36)] %>%
group_by(country) %>%
summarise_each(funs(f = round(mean(., na.rm=TRUE))))
df.2015.country = rankings %>%
group_by(., country) %>%
summarise(., top_cwur = min(rank_cwur, na.rm=T),
top_times = min(rank_times, na.rm=T),
top_shanghai = min(rank_shanghai, na.rm=T),
median_cwur = round(median(rank_cwur, na.rm=T)),
median_times = round(median(rank_times, na.rm=T)),
median_shanghai = round(median(rank_shanghai, na.rm=T)),
count_cwur = sum(!is.na(rank_cwur)),
count_times = sum(!is.na(rank_times)),
count_shanghai = sum(!is.na(rank_shanghai))) %>%
left_join(., df.2015.mean, by = 'country')
df.2015.uni = rankings %>%
filter(., !is.na(lon) & !is.na(lat)) ####---> Need to add more coordinates!!!!
runApp()
runApp()
names(df.2015.country)
runApp()
data(Andrew)
M1 <- gvisMap(Andrew, "LatLong" , "Tip",
options=list(showTip=TRUE, showLine=TRUE, enableScrollWheel=TRUE,
mapType='hybrid', useMapTypeControl=TRUE,
width=800,height=400))
plot(M1)
df <- data.frame(Postcode=c("EC3M 7HA", "EC2P 2EJ"),
Tip=c("<a href='http://www.lloyds.com'>Lloyd's</a>",
"<a href='http://www.guildhall.cityoflondon.gov.uk/'>Guildhall</a>"))
M2 <- gvisMap(df, "Postcode", "Tip",
options=list(showTip=TRUE, mapType='normal',
enableScrollWheel=TRUE))
plot(M2)
M3 <- gvisMap(df, "Postcode", "Tip",
options=list(showTip=TRUE, mapType='normal',
enableScrollWheel=TRUE,
icons=paste0("{",
"'default': {'normal': 'http://icons.iconarchive.com/",
"icons/icons-land/vista-map-markers/48/",
"Map-Marker-Ball-Azure-icon.png',\n",
"'selected': 'http://icons.iconarchive.com/",
"icons/icons-land/vista-map-markers/48/",
"Map-Marker-Ball-Right-Azure-icon.png'",
"}}")))
plot(M3)
AndrewGeo <- gvisGeoMap(Andrew,
locationvar="LatLong",
numvar="Speed_kt",
hovervar="Category",
options=list(height=350,
region="US",
dataMode="markers"))
plot(AndrewGeo)
runApp()
head(Andrew)
head(Andrew)
runApp()
G1a <- gvisGeoChart(Exports, locationvar='Country', colorvar='Profit')
plot(G1a)
G1b <- gvisGeoChart(Exports, locationvar='Country', colorvar='Profit',
options=list(projection="kavrayskiy-vii"))
G1b <- gvisGeoChart(Exports, locationvar='Country', colorvar='Profit',
options=list(projection="kavrayskiy-vii"))
plot(G1b)
G1b <- gvisGeoChart(Exports, locationvar='Country', colorvar='Profit',
options=list(projection="kavrayskiy-vii"))
plot(G1b)
## Plot only Europe
G2 <- gvisGeoChart(Exports, "Country", "Profit",
options=list(region="150"))
plot(G2)
G1b <- gvisGeoChart(Exports, locationvar='Country', colorvar='Profit',
options=list(projection="kavrayskiy-vii"))
plot(G1b)
## Plot only Europe
G2 <- gvisGeoChart(Exports, "Country", "Profit",
options=list(region="150"))
plot(G2)
## Example showing US data by state
require(datasets)
states <- data.frame(state.name, state.x77)
G3 <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G3)
## Markers Example
## A marker style map renders bubble-shaped markers at specified
## locations with the color and size that you specify.
G4 <- gvisGeoChart(CityPopularity, locationvar='City', colorvar='Popularity',
options=list(region='US', height=350,
displayMode='markers',
colorAxis="{values:[200,400,600,800],
colors:[\'red', \'pink\', \'orange',\'green']}")
)
plot(G4)
head(CityPopularity)
G5 <- gvisGeoChart(Andrew, "LatLong", colorvar='Speed_kt',
options=list(region="US"))
plot(G5)
G6 <- gvisGeoChart(Andrew, "LatLong", sizevar='Speed_kt',
colorvar="Pressure_mb", options=list(region="US"))
G6 <- gvisGeoChart(Andrew, "LatLong", sizevar='Speed_kt',
colorvar="Pressure_mb", options=list(region="US"))
plot(G6)
require(stats)
data(quakes)
head(quakes)
quakes$latlong<-paste(quakes$lat, quakes$long, sep=":")
G7 <- gvisGeoChart(quakes, "latlong", "depth", "mag",
options=list(displayMode="Markers", region="009",
colorAxis="{colors:['red', 'grey']}",
backgroundColor="lightblue"))
plot(G7)
library(XML)
url <- "http://en.wikipedia.org/wiki/List_of_countries_by_credit_rating"
x <- readHTMLTable(readLines(url), which=3)
levels(x$Rating) <- substring(levels(x$Rating), 4,
nchar(levels(x$Rating)))
x$Ranking <- x$Rating
levels(x$Ranking) <- nlevels(x$Rating):1
x$Ranking <- as.character(x$Ranking)
x$Rating <- paste(x$Country, x$Rating, sep=": ")
#### Create a geo chart
G8 <- gvisGeoChart(x, "Country", "Ranking", hovervar="Rating",
options=list(gvis.editor="S&P",
colorAxis="{colors:['#91BFDB', '#FC8D59']}"))
plot(G8)
library(XML)
url <- "http://en.wikipedia.org/wiki/List_of_countries_by_credit_rating"
x <- readHTMLTable(readLines(url), which=3)
## Plot world wide earth quakes of the last 30 days with magnitude >= 4.0
library(XML)
## Get earthquake data of the last 30 days
eq <- read.csv("http://earthquake.usgs.gov/earthquakes/feed/v0.1/summary/2.5_week.csv")
eq$loc=paste(eq$Latitude, eq$Longitude, sep=":")
G9 <- gvisGeoChart(eq, "loc", "Depth", "Magnitude",
options=list(displayMode="Markers",
colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue"), chartid="EQ")
plot(G9)
plot(G7)
# add some circles to a map
df = data.frame(Lat = 1:10, Long = rnorm(10))
leaflet(df) %>% addCircles()
leaflet(df) %>% addCircles(lng = ~Long, lat = ~Lat)
leaflet() %>% addCircles(data = df)
leaflet() %>% addCircles(data = df, lat = ~ Lat, lng = ~ Long)
library(maps)
mapStates = map("state", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
m = leaflet() %>% addTiles()
df = data.frame(
lat = rnorm(100),
lng = rnorm(100),
size = runif(100, 5, 20),
color = sample(colors(), 100)
)
m = leaflet(df) %>% addTiles()
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
m %>% addCircleMarkers(radius = runif(100, 4, 10), color = c('red'))
unimap<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addTiles(urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
addMarkers(data = df.2015.uni[,c('lon','lat')],
icon = mapIcon,
clusterOptions = markerClusterOptions())
unimap
library(shiny)
library(leaflet)
library(googleVis)
source('./helpers.R')
unimap<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addTiles(urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
addMarkers(data = df.2015.uni[,c('lon','lat')],
icon = mapIcon,
clusterOptions = markerClusterOptions())
unimap
unimap<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addTiles(urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
addMarkers(data = df.2015.uni[,c('lon','lat')],
icon = mapIcon,
clusterOptions = markerClusterOptions())
mapIcon <- makeIcon(
iconUrl = "http://www.map.boun.edu.tr/css/img/bina.png",
iconWidth = 20, iconHeight = 20
# iconAnchorX = 22, iconAnchorY = 94
# shadowUrl = "http://leafletjs.com/docs/images/leaf-shadow.png",
# shadowWidth = 50, shadowHeight = 64,
# shadowAnchorX = 4, shadowAnchorY = 62
)
unimap<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addTiles(urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
addMarkers(data = df.2015.uni[,c('lon','lat')],
icon = mapIcon,
clusterOptions = markerClusterOptions())
unimap
unimap<-leaflet() %>%
#addProviderTiles("CartoDB.Positron") %>%
addTiles(urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
addMarkers(data = df.2015.uni[,c('lon','lat')],
icon = mapIcon,
clusterOptions = markerClusterOptions())
unimap
unimap<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
# addTiles(urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
#          attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
addMarkers(data = df.2015.uni[,c('lon','lat')],
icon = mapIcon,
clusterOptions = markerClusterOptions())
unimap
unimap<-leaflet() %>%
#addProviderTiles("CartoDB.Positron") %>%
# addTiles(urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
#          attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
addMarkers(data = df.2015.uni[,c('lon','lat')],
icon = mapIcon,
clusterOptions = markerClusterOptions())
unimap
unimap<-leaflet() %>%
addTiles() %>%
#addProviderTiles("CartoDB.Positron") %>%
# addTiles(urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
#          attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
addMarkers(data = df.2015.uni[,c('lon','lat')],
icon = mapIcon,
clusterOptions = markerClusterOptions())
unimap
unimap<-leaflet() %>%
#addTiles() %>%
addProviderTiles("CartoDB.Positron") %>%
# addTiles(urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
#          attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
addMarkers(data = df.2015.uni[,c('lon','lat')],
icon = mapIcon,
clusterOptions = markerClusterOptions())
unimap
unimap<-leaflet() %>%
addTiles() %>%
addMarkers(data = df.2015.uni[,c('lon','lat')],
icon = mapIcon,
clusterOptions = markerClusterOptions())
unimap
# }
runApp()
unimap<-leaflet() %>%
#addTiles() %>%
addProviderTiles("MapQuestOpen.OSM") %>%
# addTiles(urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
#          attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
addMarkers(data = df.2015.uni[,c('lon','lat')],
icon = mapIcon,
clusterOptions = markerClusterOptions())
unimap
runApp()
runApp()
unimap<-leaflet() %>%
addProviderTiles("Esri.WorldStreetMap") %>%
addMarkers(data = df.2015.uni[,c('lon','lat')],
icon = mapIcon,
clusterOptions = markerClusterOptions()) %>%
addCircleMarkers()
unimap<-leaflet() %>%
addProviderTiles("Esri.WorldStreetMap") %>%
# addMarkers(data = df.2015.uni[,c('lon','lat')],
#            icon = mapIcon,
#            clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(data = df.2015.uni[,c('lon','lat')])
unimap
unimap<-leaflet() %>%
addProviderTiles("Esri.WorldStreetMap") %>%
# addMarkers(data = df.2015.uni[,c('lon','lat')],
#            icon = mapIcon,
#            clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(data = df.2015.uni[,c('lon','lat')],
radius = 5,#~ifelse(type == "ship", 6, 10),
#color = ~pal(type),
stroke = FALSE, fillOpacity = 0.5)
unimap
runApp()
runApp('~/Google Drive/Data Science/4. Lectures/1. Git R Knitr Shiny GoogleVis/13.Shiny dashboard/dashboard_demo')
runApp()
library(htmltools)
unimap<-leaflet() %>%
addProviderTiles("Esri.WorldStreetMap") %>%
# addMarkers(data = df.2015.uni[,c('lon','lat')],
#            icon = mapIcon,
#            clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(data = df.2015.uni[,c('lon','lat')],
radius = 4, stroke = F, fillOpacity = 0.6,
popup = ~htmlEscape(new_name))
unimap
View(df.2015.uni)
runApp()
with(df.2015.uni, popup = paste(~htmlEscape(new_name),': \nShanghai rank: ',rank_shanghai))
popup = paste(~htmlEscape(new_name),': \nShanghai rank: ',rank_shanghai)
popup = paste(~htmlEscape(df.2015.uni$new_name),': \nShanghai rank: ',df.2015.uni$rank_shanghai)
popup
popup$1
popup[1]
unimap<-leaflet(df.2015.uni) %>%
addProviderTiles("Esri.WorldStreetMap") %>%
addCircleMarkers(~lon, ~lat,
radius = 4, stroke = F, fillOpacity = 0.5,
#color = ~pal(room_type),
popup = ~paste(sep = "<br/>","Institution:",new_name,
"Shanghai rank:",rank_shanghai,
"Times rank:",rank_times,
"CWUR rank:",rank_cwur))
unimap
countries <- readOGR("json/countries.geojson", "OGRGeoJSON")
countries <- readOGR("data/countries.geojson", "OGRGeoJSON")
library("jsonlite", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
countries <- readOGR("data/countries.geojson", "OGRGeoJSON")
library(rgdal)
library(leaflet)
tmp <- tempdir()
url <- "http://personal.tcu.edu/kylewalker/data/mexico.zip"
file <- basename(url)
download.file(url, file)
unzip(file, exdir = tmp)
mexico <- readOGR(dsn = tmp, layer = "mexico", encoding = "UTF-8")
head(mexico@data)
mexico <- readOGR(dsn = tmp, layer = "mexico", encoding = "UTF-8")
head(mexico@data)
runApp()
universities = sort(unique(rankigs$new_name))
universities = sort(unique(rankings$new_name))
runApp()
runApp()
runApp()
runApp()
