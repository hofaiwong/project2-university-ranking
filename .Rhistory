runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
legend="{position: 'bottom', maxLines: 5}"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(ggmap)
geocode("dalhousie university")
c = 500 #cutoff for geolocations
runApp()
geocode("simon fraser university")
runApp()
geocode("University of Virginia")
View(timesData)
runApp()
geocode('simon fraser university')
geocode('mcgill university')
geocode('drexel university')
runApp()
#Split range of ranks
split_rank <- function(rank) {
if (grepl('-',rank)) {
x = as.numeric(strsplit(rank, split='-')[[1]][1])
y = as.numeric(strsplit(rank, split='-')[[1]][2])
new_rank = round(x + (y-x)/2)
} else {
new_rank = rank
}
return(new_rank)
}
#Draw world map for stat by country
world_map <- function(var, stat, color) {
df = df.2015.country[!is.na(var),]
gvisGeoChart(data = df,
locationvar = "country",
colorvar = stat,
options=list(
projection="kavrayskiy-vii",
colorAxis=color,
width='100%',
height='100%',
keepAspectRatio = TRUE
)
)}
#Draw bar chart for uni scores
baruni <- function(df, yvar) {
baruni <- gvisColumnChart(df,
yvar=yvar,
options=list(height=500,
legend="{position: 'top', maxLines: 10}",
vAxis='{minValue:0, maxValue:100}'))
baruni
}
#Convert rank to score
ranktoscore <- function(x) {
return((1-x/1000) * 100) #n=1000 obs in CWUR 2015
}
#Split range of ranks
split_rank <- function(rank) {
if (grepl('-',rank)) {
x = as.numeric(strsplit(rank, split='-')[[1]][1])
y = as.numeric(strsplit(rank, split='-')[[1]][2])
new_rank = round(x + (y-x)/2)
} else {
new_rank = rank
}
return(new_rank)
}
#Draw world map for stat by country
world_map <- function(var, stat, color) {
df = df.2015.country[!is.na(var),]
gvisGeoChart(data = df,
locationvar = "country",
colorvar = stat,
options=list(
projection="kavrayskiy-vii",
colorAxis=color,
width='100%',
height='100%',
keepAspectRatio = TRUE
)
)}
#Draw bar chart for uni scores
baruni <- function(df, yvar) {
baruni <- gvisColumnChart(df,
yvar=yvar,
options=list(height=500,
legend="{position: 'top', maxLines: 10}",
vAxis='{minValue:0, maxValue:100}'))
baruni
}
#Convert rank to score
ranktoscore <- function(x) {
return((1-x/1000) * 100) #n=1000 obs in CWUR 2015
}
setwd("~/Desktop/Project 2/world-university-ranking")
## global.R ##
library(dplyr)
source('helpers.r')
school_and_country_table = read.csv("./data/school_and_country_table.csv", stringsAsFactors = F) %>%
rename(., university_name = school_name)
cleanupCountry = read.csv("./data/cleanupCountry.csv", stringsAsFactors = F)
cleanupRename = read.csv("./data/cleanupRename.csv", stringsAsFactors = F)
cwur = read.csv("./data/cwurData.csv", stringsAsFactors = F) %>%
rename(., university_name = institution, total_score = score) %>%
mutate(., university_name = ifelse (grepl('^The ', university_name),
gsub('The ','',university_name),
university_name)) %>%
left_join(., cleanupRename, by = c('university_name')) %>%
mutate(., new_name = ifelse(is.na(new_name), university_name, new_name)) %>%
filter(., year == 2015)
#Missingness check: no NAs for 2015
cwur[,c(5:12)] = sapply(cwur[,c(5:12)], ranktoscore) #Convert CWUR ranks to scores
shanghaiData = read.csv("./data/shanghaiData.csv", stringsAsFactors = F) %>%
left_join(., rbind(school_and_country_table,cleanupCountry), by = c('university_name')) %>%
mutate(., university_name = ifelse (grepl('^The ', university_name),
gsub('The ','',university_name),
university_name)) %>%
left_join(., cleanupRename, by = c('university_name')) %>%
mutate(., new_name = ifelse(is.na(new_name), university_name, new_name)) %>%
filter(., year == 2015)
#Missingness check: total_score is missing for universities ranked >100 (do not use; take rank instead); use kNN for imputing ns NAs (sqrt(n) ~ 70)
# shanghaiData.i = kNN(shanghaiData, k = 70)
# shanghaiData = shanghaiData.i[,1:13]
timesData = read.csv("./data/timesData.csv", stringsAsFactors = F) %>%
mutate(., university_name = ifelse (grepl('^The ', university_name),
gsub('The ','',university_name),
university_name)) %>%
left_join(., cleanupRename, by = c('university_name')) %>%
mutate(., new_name = ifelse(is.na(new_name), university_name, new_name),
international = as.numeric(international),
income = as.numeric(income),
total_score = as.numeric(total_score)) %>%
filter(., year == 2015)
#Missingness check: total_score is missing for universities ranked >200 (do not use; take rank instead); use kNN for imputing NAs (sqrt(n) ~ 51)
# timesData.i = kNN(timesData, k = 51)
# timesData = timesData.i[,1:15]
rankings = unique(rbind(cwur[,c('new_name','country','year')],
timesData[,c('new_name','country','year')],
shanghaiData[,c('new_name','country','year')]) %>%
mutate(., country = gsub('Republic of Ireland', 'Ireland', country)) %>%
mutate(., country = gsub('USA','United States of America', country)) %>%
mutate(., country = gsub('Unisted States of America','United States of America', country)) %>%
mutate(., country = gsub('Unted Kingdom', 'United Kingdom', country)) %>%
mutate(., country = gsub('UK', 'United Kingdom', country)) %>%
mutate(., country = gsub('Slovak Republic', 'Slovakia', country)) %>%
mutate(., country = gsub('Russian Federation', 'Russia', country))) %>%
left_join(., cwur[,c(1,4:15)], by = c('new_name', 'year')) %>%
left_join(., timesData[,c(1,4:15)], by = c('new_name', 'year')) %>%
left_join(., shanghaiData[,c(1,3:11,13)], by = c('new_name', 'year')) %>%
rename(., rank_cwur = world_rank.x,
national_rank_cwur = national_rank.x,
citations_cwur = citations.x,
total_score_cwur = total_score.x,
rank_times = world_rank.y,
citations_times = citations.y,
total_score_times = total_score.y,
rank_shanghai = world_rank,
national_rank_shanghai = national_rank.y,
total_score_shanghai = total_score) %>%
mutate(., rank_times = gsub('=','',rank_times)) %>%
mutate(., rank_times = as.integer(sapply(rank_times, split_rank)),
rank_shanghai = as.integer(sapply(rank_shanghai, split_rank))) %>%
arrange(., desc(new_name))
countries = sort(unique(rankings$country))
universities = sort(unique(rankings$new_name))
View(rankings)
str(rankings)
names(rankings)
df.2015.mean = rankings[,c(2,4:21,26:34)] %>%
group_by(country) %>%
summarise_each(funs(f = round(mean(., na.rm=TRUE))))
View(df.2015.mean)
df.2015.country = rankings %>%
group_by(., country) %>%
summarise(., top_cwur = min(rank_cwur, na.rm=T),
top_times = min(rank_times, na.rm=T),
top_shanghai = min(rank_shanghai, na.rm=T),
median_cwur = round(median(rank_cwur, na.rm=T)),
median_times = round(median(rank_times, na.rm=T)),
median_shanghai = round(median(rank_shanghai, na.rm=T)),
count_cwur = sum(!is.na(rank_cwur)),
count_times = sum(!is.na(rank_times)),
count_shanghai = sum(!is.na(rank_shanghai))) %>%
left_join(., df.2015.mean, by = 'country') #Adding columns for the means of scoring criteria
runApp()
runApp()
runApp()
runApp()
str(rankings)
names(rankings)
runApp()
runApp()
## End(Not run)
ibrary(googleVis)
demo(googleVis)
dat <- data.frame(Year=2010:2013,
Sales=c(600, 1500, 800, 1000),
Sales.html.tooltip=c('$600K in our first year!',
'Sunspot activity made this our best year ever!',
'$800K in 2012.',
'$1M in sales last year.'),
Sales.certainty=c(TRUE, FALSE, TRUE, FALSE))
plot(
gvisColumnChart(dat, xvar='Year',
yvar=c('Sales', 'Sales.certainty')
)
)
df <- data.frame(year=1:11,pop=1:11,
pop.html.tooltip=letters[1:11])
plot(
gvisScatterChart(df)
)
runApp()
runApp()
runApp()
setwd("~/Desktop/Project 2/world-university-ranking")
## global.R ##
library(dplyr)
source('helpers.r')
school_and_country_table = read.csv("./data/school_and_country_table.csv", stringsAsFactors = F) %>%
rename(., university_name = school_name)
cleanupCountry = read.csv("./data/cleanupCountry.csv", stringsAsFactors = F)
cleanupRename = read.csv("./data/cleanupRename.csv", stringsAsFactors = F)
cwur = read.csv("./data/cwurData.csv", stringsAsFactors = F) %>%
rename(., university_name = institution, total_score = score) %>%
mutate(., university_name = ifelse (grepl('^The ', university_name),
gsub('The ','',university_name),
university_name)) %>%
left_join(., cleanupRename, by = c('university_name')) %>%
mutate(., new_name = ifelse(is.na(new_name), university_name, new_name)) %>%
filter(., year == 2015)
#Missingness check: no NAs for 2015
cwur[,c(5:12)] = sapply(cwur[,c(5:12)], ranktoscore) #Convert CWUR ranks to scores
shanghaiData = read.csv("./data/shanghaiData.csv", stringsAsFactors = F) %>%
left_join(., rbind(school_and_country_table,cleanupCountry), by = c('university_name')) %>%
mutate(., university_name = ifelse (grepl('^The ', university_name),
gsub('The ','',university_name),
university_name)) %>%
left_join(., cleanupRename, by = c('university_name')) %>%
mutate(., new_name = ifelse(is.na(new_name), university_name, new_name)) %>%
filter(., year == 2015)
#Missingness check: total_score is missing for universities ranked >100 (do not use; take rank instead); use kNN for imputing ns NAs (sqrt(n) ~ 70)
# shanghaiData.i = kNN(shanghaiData, k = 70)
# shanghaiData = shanghaiData.i[,1:13]
timesData = read.csv("./data/timesData.csv", stringsAsFactors = F) %>%
mutate(., university_name = ifelse (grepl('^The ', university_name),
gsub('The ','',university_name),
university_name)) %>%
left_join(., cleanupRename, by = c('university_name')) %>%
mutate(., new_name = ifelse(is.na(new_name), university_name, new_name),
international = as.numeric(international),
income = as.numeric(income),
total_score = as.numeric(total_score)) %>%
filter(., year == 2015)
#Missingness check: total_score is missing for universities ranked >200 (do not use; take rank instead); use kNN for imputing NAs (sqrt(n) ~ 51)
# timesData.i = kNN(timesData, k = 51)
# timesData = timesData.i[,1:15]
#Data frame of unique universities ranked in 2015
rankings = unique(rbind(cwur[,c('new_name','country','year')],
timesData[,c('new_name','country','year')],
shanghaiData[,c('new_name','country','year')]) %>%
mutate(., country = gsub('Republic of Ireland', 'Ireland', country)) %>%
mutate(., country = gsub('USA','United States of America', country)) %>%
mutate(., country = gsub('Unisted States of America','United States of America', country)) %>%
mutate(., country = gsub('Unted Kingdom', 'United Kingdom', country)) %>%
mutate(., country = gsub('UK', 'United Kingdom', country)) %>%
mutate(., country = gsub('Slovak Republic', 'Slovakia', country)) %>%
mutate(., country = gsub('Russian Federation', 'Russia', country))) %>%
left_join(., cwur[,c(1,4:15)], by = c('new_name', 'year')) %>%
left_join(., timesData[,c(1,4:15)], by = c('new_name', 'year')) %>%
left_join(., shanghaiData[,c(1,3:11,13)], by = c('new_name', 'year')) %>%
rename(., rank_cwur = world_rank.x,
national_rank_cwur = national_rank.x,
citations_cwur = citations.x,
total_score_cwur = total_score.x,
rank_times = world_rank.y,
citations_times = citations.y,
total_score_times = total_score.y,
rank_shanghai = world_rank,
national_rank_shanghai = national_rank.y,
total_score_shanghai = total_score) %>%
mutate(., rank_times = gsub('=','',rank_times)) %>%
mutate(., rank_times = as.integer(sapply(rank_times, split_rank)),
rank_shanghai = as.integer(sapply(rank_shanghai, split_rank))) %>%
arrange(., desc(new_name))
countries = sort(unique(rankings$country))
universities = sort(unique(rankings$new_name))
#Quick way to get the means of the scoring criteria
df.2015.mean = rankings[,c(2,4:21,26,28:34)] %>%
group_by(country) %>%
summarise_each(funs(f = round(mean(., na.rm=TRUE))))
#Data frame for mapping countries
df.2015.country = rankings %>%
group_by(., country) %>%
summarise(., top_cwur = min(rank_cwur, na.rm=T),
top_times = min(rank_times, na.rm=T),
top_shanghai = min(rank_shanghai, na.rm=T),
median_cwur = round(median(rank_cwur, na.rm=T)),
median_times = round(median(rank_times, na.rm=T)),
median_shanghai = round(median(rank_shanghai, na.rm=T)),
count_cwur = sum(!is.na(rank_cwur)),
count_times = sum(!is.na(rank_times)),
count_shanghai = sum(!is.na(rank_shanghai))) %>%
left_join(., df.2015.mean, by = 'country') #Adding columns for the means of scoring criteria
#Split range of ranks
split_rank <- function(rank) {
if (grepl('-',rank)) {
x = as.numeric(strsplit(rank, split='-')[[1]][1])
y = as.numeric(strsplit(rank, split='-')[[1]][2])
new_rank = round(x + (y-x)/2)
} else {
new_rank = rank
}
return(new_rank)
}
#Draw world map for stat by country
world_map <- function(var, stat, color) {
df = df.2015.country[!is.na(var),]
gvisGeoChart(data = df,
locationvar = "country",
colorvar = stat,
options=list(
projection="kavrayskiy-vii",
colorAxis=color,
width='100%',
height='100%',
keepAspectRatio = TRUE
)
)}
#Draw bar chart for uni scores
baruni <- function(df, yvar) {
baruni <- gvisColumnChart(df,
yvar=yvar,
options=list(height=500,
legend="{position: 'top', maxLines: 10}",
vAxis='{minValue:0, maxValue:100}'))
baruni
}
#Convert rank to score
ranktoscore <- function(x) {
return((1-x/1000) * 100) #n=1000 obs in CWUR 2015
}
runApp()
runApp()
df.2015.country[,c(1,4,3,2,7,6,5,10,9,8)]
runApp()
?selectizeInput
runApp()
df = head(rankings)
df
df.T <- t(df[,2:ncol(df)])
# Set the column headings
colnames(df.T) <- df[1,]
df.t <- t(df[,2:ncol(df)])
colnames(df.T) <- df[1,]
df = head(rankings)
df.t <- t(df[,2:ncol(df)])
# Set the column headings
colnames(df.t) <- df[1,]
t(df[,2:ncol(df)])
t(df[,1:ncol(df)])
df = head(rankings[,1:4])
df.t <- t(df[,1:ncol(df)])
df.t
colnames(df.t) <- df[1,]
t(df[,1:ncol(df)])
df = head(rankings[,1:2])
t(df[,1:ncol(df)])
df = head(rankings[,1:3])
df = head(rankings[,1:3],2)
df
t(df[,2:ncol(df)])
colnames(df.t) <- df[1,]
dim(df)
dim(df.t)
df = head(rankings[,1:3],2)
df.t <- t(df[,2:ncol(df)])
dim(df); dim(df.t)
colnames(df.t)
df[1,]
colnames(df.t) <- df[1,]
df = head(rankings[,1:3],2)
df.t <- t(df[,2:ncol(df)])
colnames(df.t) <- df$new_name
df.t
runApp()
df = head(rankings[,1:3],2)
df.t <- t(df[,2:ncol(df)])
colnames(df.t) <- df$new_name
class(df.t)
as.data.frame(df.t)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot(Bar5)
df <- data.frame(country=c("US", "GB", "BR"),
val1=c(1,3,4),
val2=c(23,12,32))
Bar1 <- gvisBarChart(df, xvar="country", yvar=c("val1", "val2"))
plot(Bar1)
Bar2 <- gvisBarChart(df, xvar="country", yvar=c("val1", "val2"),
options=list(isStacked=TRUE))
plot(Bar2)
Bar3 <- gvisBarChart(df, xvar="country", yvar=c("val1", "val2"),
options=list(title="Hello World",
titleTextStyle="{color:'red',fontName:'Courier',fontSize:16}",
bar="{groupWidth:'100%'}"))
plot(Bar3)
Bar4 <- gvisBarChart(df, xvar="country", yvar=c("val1", "val2"),
options=list(hAxis="{format:'#,###%'}"))
plot(Bar4)
runApp()
df.2015.country[!is.na(var),] %>%
arrange(desc(var))
df.2015.country[!is.na(var),]
df = df.2015.country[!is.na(var),]
View(df)
df = df.2015.country[!is.na(df.2015.country$patents),] %>%
arrange(desc(df.2015.country$patents))
df = df.2015.country[!is.na(df.2015.country$patents),] %>%
arrange(desc(patents))
stat='patents'
df = df.2015.country[!is.na(df.2015.country$patents),] %>%
arrange(desc(stat))
df = df.2015.country[!is.na(df.2015.country$patents),] %>%
arrange(desc(c('stat'))
df = df.2015.country[!is.na(df.2015.country$patents),] %>%
arrange(desc(c('stat')))
runApp()
runApp()
runApp()
runApp()
?grep
grepl('top','top_shanghai')
grepl('top','bottom_shanghai')
runApp()
View(df)
runApp()
?sort
?order
runApp()
runApp()
View(df.2015.country)
names(df.2015.country)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
names(rankings)
runApp()
install.packages("DT")
runApp()
shiny::runApp()
View(cwur)
cwur = read.csv("./data/cwurData.csv", stringsAsFactors = F) %>%
rename(., university_name = institution, total_score = score) %>%
mutate(., university_name = ifelse (grepl('^The ', university_name),
gsub('The ','',university_name),
university_name)) %>%
left_join(., cleanupRename, by = c('university_name')) %>%
mutate(., new_name = ifelse(is.na(new_name), university_name, new_name)) %>%
filter(., year == 2015)
?scale
temp=cwur$quality_of_education
temp
temp2=scale(temp)
final=cbind(temp,temp2)
View(final)
temp=cwur$quality_of_education
temp2=scale(temp, center=F)
final=cbind(temp,temp2)
View(final)
temp=cwur$quality_of_education
temp2=scale(temp, center=F, scale = F)
final=cbind(temp,temp2)
runApp()
?selectizeInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dataTableOutput
runApp()
